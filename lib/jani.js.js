// Generated by CoffeeScript 1.6.3
(function() {
  var FrameRectangle, Movie, Screen, Strip, img, movie, movieData, screen, screenElement, strips, _i, _len, _ref;

  Strip = (function() {
    function Strip(image_uri, frameWidth, frameHeight, framesCount) {
      var frameIndex, _i, _ref;
      this.image_uri = image_uri;
      this.frameWidth = frameWidth;
      this.frameHeight = frameHeight;
      this.framesCount = framesCount;
      this.frames = [];
      for (frameIndex = _i = 0, _ref = this.framesCount - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; frameIndex = 0 <= _ref ? ++_i : --_i) {
        this.frames.push(new FrameRectangle(0, this.frameHeight * (this.framesCount - frameIndex)));
      }
      this.frameIndex = 0;
    }

    Strip.prototype.currentFrame = function() {
      return this.frames[this.frameIndex];
    };

    Strip.prototype.moveFrameToNext = function() {
      if (this.isLastFrame()) {
        return this.frameIndex = 0;
      } else {
        return this.frameIndex++;
      }
    };

    Strip.prototype.isLastFrame = function() {
      return this.frameIndex === this.framesCount - 1;
    };

    Strip.prototype.toCssText = function() {
      var stripStyle;
      stripStyle = "background-image: url(" + this.image_uri + "); background-size: cover;ã€€background-repeat: no-repeat;";
      return stripStyle + this.currentFrame().toCssText();
    };

    return Strip;

  })();

  FrameRectangle = (function() {
    function FrameRectangle(leftPosition, topPosition) {
      this.leftPosition = leftPosition;
      this.topPosition = topPosition;
    }

    FrameRectangle.prototype.toCssText = function() {
      return "background-position: " + this.leftPosition + "px " + this.topPosition + "px;";
    };

    return FrameRectangle;

  })();

  Screen = (function() {
    function Screen(element) {
      this.element = element;
    }

    Screen.prototype.setStrips = function(strips) {
      this.strips = strips;
    };

    Screen.prototype.showCurrentFrame = function() {
      var defaultStyle;
      defaultStyle = this.element.style.cssText;
      return this.element.style.cssText = defaultStyle + this.currentStrip().toCssText();
    };

    Screen.prototype.currentStrip = function() {
      return this.strips[0];
    };

    return Screen;

  })();

  Movie = (function() {
    function Movie(screen, strips, fps) {
      this.screen = screen;
      this.strips = strips;
      this.fps = fps;
      this.screen.setStrips(this.strips);
    }

    Movie.prototype.play = function() {
      var _this = this;
      return this.timerId = setInterval(function() {
        _this.screen.showCurrentFrame();
        return _this.screen.currentStrip().moveFrameToNext();
      }, 1000 / this.fps);
    };

    Movie.prototype.pause = function() {
      if (this.timerId) {
        return clearInterval(this.timerId);
      }
    };

    return Movie;

  })();

  screenElement = document.getElementById('movie');

  movieData = screenElement.dataset;

  screen = new Screen(screenElement);

  _ref = document.getElementById('strips').getElementsByTagName('img');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    img = _ref[_i];
    strips = [].concat(new Strip(img.src, movieData.frameWidth, movieData.frameHeight, movieData.framesCount));
  }

  movie = new Movie(screen, strips, movieData.fps);

  window.movie = movie;

  movie.play();

  setTimeout(function() {
    return movie.pause();
  }, 15000);

}).call(this);
